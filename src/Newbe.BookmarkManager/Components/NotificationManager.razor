@using Newbe.BookmarkManager.Services
@using Newbe.BookmarkManager.Services.EventHubs

<Popover Placement="@PlacementType.Bottom"
         TitleTemplate="@_text" ContentTemp="" Trigger="@(new[] {AntDesign.TriggerType.Click})">
    
    <NotificationList NotificationRecords="_messages" OnClick="ClickToRead"></NotificationList>
    <Badge Count="UnreadCount" Class="badge" >
            <Button Class="noticeButton">
                <Icon Type="bell" Theme="outline" Width="2em" Height="2em" />
            </Button>
        </Badge>

</Popover>

<style>
    .popover {
      position: relative;
      width: 336px;
    }
    
    .noticeButton {
      display: inline-block;
      cursor: pointer;
      transition: all 0.3s;
      padding: 4px 4px;
    }
    .icon {
      padding: 4px;
      vertical-align: middle;
    }
    
    .badge {
      font-size: 16px;
    }
    

</style>


@code {
    [Inject]
    public INotificationRecordService NotificationRecordService { get; set; }
    [Inject] 
    public IAfEventHub AfEventHub { get; set; }

    private int UnreadCount;
    private RenderFragment _text =@<span>Notification</span>;
    public List<NotificationRecord> _messages { get; set; }

    private RenderFragment<MessageModel> Mytemplate2 =(messages)=> @<NotificationList NotificationRecords="@messages.NotificationRecords" OnClick="messages.Action" ></NotificationList>;
    private RenderFragment<MessageModel> MyTemplate = (messages) => @<AntList Bordered DataSource="@messages.NotificationRecords"
                                                                              TItem="NotificationRecord" >
                                                                                   <ChildContent Context="message">
                                                                                       <ListItem @key="@message.Id">
                                                                                           <Card Title=@message.Message>
                                                                                              <p>@message.Description</p>
                                                                                              <p>@message.CreatedTime</p>
                                                                                           </Card>
                                                                                       </ListItem>
                                                                                   </ChildContent>
                                                                               </AntList>;

    public class MessageModel
    {
        public List<NotificationRecord> NotificationRecords { get; set; }
        public EventCallback<NotificationRecord> Action { get; set; }
    }
    private  void ClickToRead(NotificationRecord entity)
    {
        //NotificationRecordService.CompleteAsync(entity.Id);
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UnreadCount = await NotificationRecordService.GetUnreadCountAsync();
        _messages = await NotificationRecordService.GetListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            AfEventHub.RegisterHandler<UserLoginSuccessEvent>(HandleUserNotificationEvent);
        }
    }
    
    private async Task HandleUserNotificationEvent(UserLoginSuccessEvent afEvent)
    {
        
        UnreadCount = await NotificationRecordService.GetUnreadCountAsync();
    }
}