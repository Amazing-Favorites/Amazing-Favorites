@using Microsoft.Extensions.Logging
<span style="display: @(IsAdding ? "inline-block" : "none")">
    <AutoComplete Options="Options" OnSelectionChange="OnCreatingTag">
        <ChildContent>
            <AutoCompleteSearch OnPressEnter="e => OnCreatingTag()"
                                OnBlur="e => OnCreatingTag()"
                                Placeholder="enter to add tag"
                                @ref="ValueRef"
                                @bind-Value="_value">
            </AutoCompleteSearch>
        </ChildContent>
    </AutoComplete>
</span>
<span style="display: @(!IsAdding ? "inline-block" : "none")">
    <Tag Class="site-tag-plus" OnClick="e => OnClickAddTagAsync()">
        <Icon Type="plus"/>New Tag
    </Tag>
</span>

@code {

    public record NewTagArgs(string[] Tags);

    [Inject]
    public ILogger<TagInput> Logger { get; set; }

    private AutoCompleteSearch ValueRef = null!;

    [Parameter]
    public bool IsAdding { get; set; }

    private string _value = null!;

    [Parameter]
    public EventCallback<NewTagArgs> OnNewTagsCreated { get; set; }

    [Parameter]
    public string Separator { get; set; } = ",";

    [Parameter]
    public string[] Options { get; set; } = Array.Empty<string>();

    private void OnClickAddTagAsync()
    {
        IsAdding = true;
        Task.Run(async () =>
        {
            await Task.Delay(TimeSpan.FromMilliseconds(100));
            await ValueRef.Ref.FocusAsync();
        });
    }

    private async Task OnCreatingTag()
    {
        try
        {
            await FireCreateTagAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            IsAdding = false;
        }
    }

    private async Task FireCreateTagAsync()
    {
        string[] newTags = Array.Empty<string>();
        if (!string.IsNullOrWhiteSpace(_value))
        {
            newTags = _value.Split(Separator)
                .Select(x => x.Trim())
                .Where(x => !string.IsNullOrWhiteSpace(x))
                .ToArray();
        }

        if (newTags.Any())
        {
            await OnNewTagsCreated.InvokeAsync(new NewTagArgs(newTags));
            _value = string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (IsAdding)
        {
            await ValueRef.Ref.FocusAsync();
        }
    }
}